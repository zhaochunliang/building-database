extends layout_new

block content
  section.container
    div.col-7
      h1 Set building location

      form#add-location-form
        label(for="pelias") Move to:
        input#pelias(type="text" placeholder="Enter name of place to move to")

        label(for="scale") Scale:
        input#scale(type="text", name="scale")

        label(for="angle") Angle:
        input#angle(type="number", name="angle" min=0 max=360 step=0.001 value=0)

        label(for="scale") Latitude:
        input#latitude(type="number", name="latitude" min=-90 max=90 step=0.00001 value=51.50358)

        label(for="scale") Longitude:
        input#longitude(type="number", name="longitude" min=-180 max=180 step=0.00001 value=-0.01924)
        
        button#add-location-button(type="submit") Set location

      div#vizicities-viewport

  script(src="/lib/typeahead.js/dist/typeahead.bundle.min.js")

  link(rel="stylesheet", href="/lib/vizicities/vizi.css")
  script(src="/lib/vizicities/vizi.min.js")
  script.
    var addLocationForm = document.getElementById("add-location-form");
    var scaleInput = document.getElementById("scale");
    var angleInput = document.getElementById("angle");
    var latitudeInput = document.getElementById("latitude");
    var longitudeInput = document.getElementById("longitude");
    var addLocationButton = document.getElementById("add-location-button");

    var pelias = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace("value"),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      remote: {
        url: "http://pelias.mapzen.com/suggest?input=%QUERY&lat=51.50358&lon=-0.01924",
        filter: function(response) {
          return $.map(response.features, function(feature) {
            return {
              name: feature.properties.name,
              geometry: feature.geometry
            };
          });
        }
      }
    });
     
    pelias.initialize();
     
    $("#pelias").typeahead(null, {
      name: "pelias",
      displayKey: "name",
      source: pelias.ttAdapter()
    }).on("typeahead:selected", function(event, suggestion, actionName) {
      // TODO: Tidy this up (probably within ViziCities core)
      // - Right now ViziCities doesn't let you change camera position easily
      // - Need to add nice way to say world.moveToLatLon(coords) and have
      // everything done for you
      var coords = suggestion.geometry.coordinates;
      var viziCoords = new VIZI.LatLon(coords[1], coords[0]);

      var projected = world.project(viziCoords);

      var scale = controls.getZoom();

      controls.controls.target.x = projected.x;
      controls.controls.target.z = projected.y;

      controls.controls.update();

      controls.zoomTo(scale);

      // Move model to position
      latitudeInput.value = viziCoords.lat;
      longitudeInput.value = viziCoords.lon;

      var projected = world.project(new VIZI.LatLon(latitudeInput.value, longitudeInput.value));

      // TODO: Find a more respectable way of accessing the collada object
      world.layers[1].object.children[0].position.x = projected.x;
      world.layers[1].object.children[0].position.z = projected.y;
      world.layers[1].object.children[0].updateMatrix();

      // Manually update the grid as it doesn't update until you click
      // TODO: Replace this with a helper baked into ViziCities
      _.each(world.switchboards[0].output.grids, function(grid) {
        grid.grid.emit("moved", grid.grid.tiles, grid.grid.gridDiffSinceMouseUp);
        grid.grid.gridDiffSinceMouseUp = new VIZI.Point();
      });
    });

    var world = new VIZI.World({
      viewport: document.querySelector("#vizicities-viewport")
    });

    var controls = new VIZI.ControlsMap(world.camera, {
      viewport: world.options.viewport
    });

    var mapConfig = {
      input: {
        type: "BlueprintInputMapTiles",
        options: {
          tilePath: "https://a.tiles.mapbox.com/v3/examples.map-i86l3621/{z}/{x}/{y}@2x.png"
        }
      },
      output: {
        type: "BlueprintOutputImageTiles",
        options: {
          grids: [
          {
            zoom: 19,
            tilesPerDirection: 3,
            cullZoom: 17
          }, {
            zoom: 18,
            tilesPerDirection: 3,
            cullZoom: 16
          }, {
            zoom: 17,
            tilesPerDirection: 3,
            cullZoom: 15
          }, {
            zoom: 16,
            tilesPerDirection: 4,
            cullZoom: 10
          }
          ]
        }
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: ["tiles"],
        actionObject: "input",
        actionName: "requestTiles",
        actionArguments: ["tiles"],
        actionOutput: {
          tiles: "tiles" // actionArg: triggerArg
        }
      }, {
        triggerObject: "output",
        triggerName: "gridUpdated",
        triggerArguments: ["tiles"],
        actionObject: "input",
        actionName: "requestTiles",
        actionArguments: ["tiles"],
        actionOutput: {
          tiles: "tiles" // actionArg: triggerArg
        }
      }, {
        triggerObject: "input",
        triggerName: "tileReceived",
        triggerArguments: ["image", "tile"],
        actionObject: "output",
        actionName: "outputImageTile",
        actionArguments: ["image", "tile"],
        actionOutput: {
          image: "image", // actionArg: triggerArg
          tile: "tile"
        }
      }]
    };

    var switchboardMap = new VIZI.BlueprintSwitchboard(mapConfig);
    switchboardMap.addToWorld(world);

    var colladaConfig = {
      input: {
        type: "BlueprintInputKML",
        options: {
          path: "/api/building/#{building._id}.kml"
        }
      },
      output: {
        type: "BlueprintOutputCollada",
        options: {}
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: [],
        actionObject: "input",
        actionName: "requestData",
        actionArguments: [],
        actionOutput: {}
      }, {
        triggerObject: "input",
        triggerName: "dataReceived",
        triggerArguments: ["kml"],
        actionObject: "output",
        actionName: "outputCollada",
        actionArguments: ["collada"],
        actionOutput: {
          collada: {
            process: "map",
            itemsObject: "kml",
            itemsProperties: "placemark.model",
            transformation: {
              coordinates: ["location.longitude", "location.latitude"],
              modelPath: "link.href"
            }
          }
        }
      }]
    };

    var switchboardCollada = new VIZI.BlueprintSwitchboard(colladaConfig);
    switchboardCollada.addToWorld(world);

    var clock = new VIZI.Clock();

    var update = function() {
      var delta = clock.getDelta();

      world.onTick(delta);
      world.render();

      window.requestAnimationFrame(update);
    };

    update();

    var onScaleChange = function(event) {
      event.preventDefault();

      if (event.wheelDelta > 0 || event.detail < 0) {
        // Scroll (and scale) up
        scaleInput.value *= 1.05;
      } else {
        // Scroll (and scale) down
        scaleInput.value *= 0.95;
      }

      updateScale(scaleInput.value);
    };

    var updateScale = function(scale) {
      // TODO: Find a more respectable way of accessing the collada object
      world.layers[1].object.children[0].scale.set(scale, scale, scale);
      world.layers[1].object.children[0].updateMatrix();
    }

    // Implement custom stepper logic for scale input
    scaleInput.addEventListener("mousewheel", onScaleChange);
    scaleInput.addEventListener("DOMMouseScroll", onScaleChange);
  
    // TODO: Work out a way to intelligently run this once the collada model has finished loading
    setTimeout(function() {
      // Set initial scale value
      // TODO: Find a more respectable way of accessing the collada object
      scaleInput.value = (world.layers[1].object.children[0].scale.x) ? world.layers[1].object.children[0].scale.x : 1;
    }, 750);

    scaleInput.addEventListener("input", function(event) {
      var scale = event.target.value;

      updateScale(scale);
    });

    angleInput.addEventListener("input", function(event) {
      var angle = event.target.value;

      // TODO: Find a more respectable way of accessing the collada object
      world.layers[1].object.children[0].rotation.y = -(angle * Math.PI / 180);
      world.layers[1].object.children[0].updateMatrix();
    });

    latitudeInput.addEventListener("input", function(event) {
      var latitude = event.target.value;

      var projected = world.project(new VIZI.LatLon(latitude, longitudeInput.value));

      // TODO: Find a more respectable way of accessing the collada object
      world.layers[1].object.children[0].position.z = projected.y;
      world.layers[1].object.children[0].updateMatrix();
    });

    longitudeInput.addEventListener("input", function(event) {
      var longitude = event.target.value;

      var projected = world.project(new VIZI.LatLon(latitudeInput.value, longitude));

      // TODO: Find a more respectable way of accessing the collada object
      world.layers[1].object.children[0].position.x = projected.x;
      world.layers[1].object.children[0].updateMatrix();
    });

    // TODO: Catch errors and notify user
    addLocationForm.addEventListener("submit", function(event) {
      event.target.checkValidity();
      event.preventDefault();

      addLocationButton.innerHTML = "Adding&hellip;";

      // This requires IE 10+
      // What are the ramifications of this?
      // What alternatives exist for async file upload?
      var formData = new FormData();
      
      formData.append("scale", scaleInput.value);
      formData.append("angle", angleInput.value);
      formData.append("latitude", latitudeInput.value);
      formData.append("longitude", longitudeInput.value);

      $.ajax({
        url: "/api/building/#{building._id}",
        data: formData,
        processData: false,
        contentType: false,
        type: "PUT",
        success: function(data, status, xhr) {
          window.location.href = "/add/osm/" + data.building._id;
        },
        error: function(xhr, errorType, error) {
          // TODO: Display error and course of action

          // Unauthenticated
          if (xhr.status === 403) {
            // Redirect to login page
            window.location.href = "/login";
          }

          console.log(xhr.status);
          console.log(errorType);
          console.log(error);
        }
      });
    });