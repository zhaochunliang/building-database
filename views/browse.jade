extends layout

block content
  div#browse-map

  section.container
    div.col-4.details
      p.sort
        a.left(class=(sort == "date") ? "active" : "" href="?sort=date") By date
        a.center(class=(sort == "name") ? "active" : "" href="?sort=name") By name
        a.right(class=(sort == "downloads") ? "active" : "" href="?sort=downloads") By downloads

      if buildings.length > 0
        ul.building-list
          each building, key in buildings
            li(class=(building.highlight === true) ? "highlight" : "")
              a(href="##{building.slug.id}" data-id="#{building._id}")
                h2 #{building.name}
                p
                  small #{building.locality.district}, #{building.locality.country}
                p.stats
                  img(src="/images/icon-download.png")
                  small #{building.stats.downloads} downloads
                  img(src="/images/icon-polygon.png")
                  small #{building.structure.faces} polygons
        
        include _pagination
      else
        p No buildings

  script(src="/lib/webcomponentsjs/webcomponents.min.js")
  link(rel="import" href="/lib/flag-icon/flag-icon.html")
  
  link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css")
  script(src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js")

  script.
    var coords = [50, 0];
    var zoom = 3;

    var near = "!{near}".split(",");

    var buildings = !{JSON.stringify(buildings)};
    var buildingsById = {};
  
    if (buildings.length > 0) {
      var building = buildings[0];
      coords = [building.location.coordinates[1], building.location.coordinates[0]];
    }

    if (near[0] !== "") {
      zoom = 16;
    }

    var map = L.map("browse-map", {zoomControl: false}).setView(coords, zoom);

    // Offset map
    map.panBy(L.point(-200, 50), {animate: false});

    L.tileLayer("http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png", {
      attribution: "&copy; <a href='http://stamen.com'>Stamen</a> & <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors"
    }).addTo(map);

    // TODO: Cluster markers
    // https://github.com/Leaflet/Leaflet.markercluster
    if (buildings.length > 0) {
      buildings.forEach(function(building, index) {
        var circle = L.circleMarker([building.location.coordinates[1], building.location.coordinates[0]], {
          radius: 7,
          weight: 2,
          color: "#fff",
          opacity: 1,
          fillColor: "#2D2D2D",
          fillOpacity: 1
        }).addTo(map);

        var popup = L.popup({
            maxWidth: 450,
            closeButton: false
          }).setLatLng(circle.getLatLng())
          .setContent("<div id='browse-map-overlay'><h2><a href='/building/" + building.slug.id + "/" + building.slug.name + "'>" + building.name + "</a></h2><p>" + building.locality.district + ", " + building.locality.country + ((building.locality.countryCode) ? " <flag-icon key='" + building.locality.countryCode + "' img>" : "") + "</p><p class='buttons'><a class='button' href='/building/" + building.slug.id + "/" + building.slug.name + "'>View building</a></p><span class='stalk'></span>");
        
        building.popup = popup;

        circle.on("click", function() {
          popup.openOn(map);

          // TODO: Zoom in on marker
        });
  
        // TODO: Open on building id defined in URL hash 
        if (index === 0) {
          popup.openOn(map);
        }

        buildingsById[building._id] = building;
      });
    }

    // Set up building list handlers
    var buildingList = $("ul.building-list");
    var buildingListItems = $("ul.building-list li a");
    
    buildingListItems.on("click", function(event) {
      var id = this.dataset.id;
      var building = buildingsById[id];

      map.setView([building.location.coordinates[1], building.location.coordinates[0]], zoom);

      // Offset map
      map.panBy(L.point(-200, 50), {animate: true});

      building.popup.openOn(map);
    });