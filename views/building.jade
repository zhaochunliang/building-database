extends layout

block content
  header.map
    div#map
    div.wrapper
      section.details
        h1 #{building.name}

        p #{building.locality.district}, #{building.locality.country}
          if building.locality.countryCode
            flag-icon(key="#{building.locality.countryCode}" img)

        each model, key in building.models.raw
          - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
          button(href="/api/building/#{building._id}/download/raw/#{model.type}") Download .#{model.type} (#{size} KB)
        button(href="/api/building/#{building._id}.kml") Download .kml
        each model, key in building.models.zip
          - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
          button(href="/api/building/#{building._id}/download/zip/#{model.type}") Download #{model.type} zip (#{size} KB)

        a.license(rel="license", href="http://creativecommons.org/licenses/by-sa/4.0/")
          img(alt="Creative Commons License", style="border-width:0", src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png")

  div.wrapper
    section.details
      ul
        li Stats: #{building.stats}
        ul
          li Vertices: #{building.structure.vertices}
          li Faces: #{building.structure.faces} 
        li OSM: 
          a(href="http://www.openstreetmap.org/#{building.osm.type}/#{building.osm.id}") View on OSM
        li User ID: #{building.userId}
        li Created: #{building.createdAt}
        li Updated: #{building.updatedAt}
      hr
      p
        a(href="/building/#{building._id}/report") Report building

    section.view
      div#vizicities-viewport

  script(src="/lib/jquery/dist/jquery.min.js")

  script(src="/lib/webcomponentsjs/webcomponents.min.js")
  link(rel="import" href="/lib/flag-icon/flag-icon.html")

  link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css")
  script(src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js")

  link(rel="stylesheet", href="/lib/vizicities/vizi.css")
  script(src="/lib/vizicities/vizi.min.js")
  script.
    var map = L.map("map", {zoomControl:false}).setView([#{building.location.coordinates[1]}, #{building.location.coordinates[0]}], 4);

    // Offset map
    map.panBy(L.point(-330, -50), {animate: false});

    //- L.tileLayer("http://{s}.tile.osm.org/{z}/{x}/{y}.png", {
    L.tileLayer("http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png", {
      //- attribution: "&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors"
      attribution: "&copy; <a href='http://stamen.com'>Stamen</a> & <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors"
    }).addTo(map);

    L.marker([#{building.location.coordinates[1]}, #{building.location.coordinates[0]}]).addTo(map);

    var world = new VIZI.World({
      viewport: document.querySelector("#vizicities-viewport"),
      center: new VIZI.LatLon(#{building.location.coordinates[1]}, #{building.location.coordinates[0]})
    });

    var controls = new VIZI.ControlsMap(world.camera, {
      viewport: world.options.viewport
    });
    
    controls.controls.rotateUp(-16 * Math.PI / 180)
    controls.controls.dollyOut(1.15);
    controls.controls.autoRotate = true;

    var mapConfig = {
      input: {
        type: "BlueprintInputStaticMapImage",
        options: {
          imagePath: "https://a.tiles.mapbox.com/v3/examples.map-i86l3621/{lon},{lat},{z}/{w}x{h}@2x.png"
        }
      },
      output: {
        type: "BlueprintOutputImage",
        options: {
          distance: 200, // Distance from center in metres
          shadowTexture: "/images/vizicities-shadow.png"
        }
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: ["bounds"],
        actionObject: "input",
        actionName: "requestImage",
        actionArguments: ["bounds"],
        actionOutput: {
          bounds: "bounds"
        }
      }, {
        triggerObject: "input",
        triggerName: "imageReceived",
        triggerArguments: ["image"],
        actionObject: "output",
        actionName: "outputImage",
        actionArguments: ["image"],
        actionOutput: {
          image: "image"
        }
      }]
    };

    var switchboardMap = new VIZI.BlueprintSwitchboard(mapConfig);
    switchboardMap.addToWorld(world);

    var colladaConfig = {
      input: {
        type: "BlueprintInputKML",
        options: {
          path: "/api/building/#{building._id}.kml"
        }
      },
      output: {
        type: "BlueprintOutputCollada",
        options: {}
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: [],
        actionObject: "input",
        actionName: "requestData",
        actionArguments: [],
        actionOutput: {}
      }, {
        triggerObject: "input",
        triggerName: "dataReceived",
        triggerArguments: ["kml"],
        actionObject: "output",
        actionName: "outputCollada",
        actionArguments: ["collada"],
        actionOutput: {
          collada: {
            process: "map",
            itemsObject: "kml",
            itemsProperties: "placemark.model",
            transformation: {
              coordinates: ["location.longitude", "location.latitude"],
              modelPath: "link.href"
            }
          }
        }
      }]
    };

    var switchboardCollada = new VIZI.BlueprintSwitchboard(colladaConfig);
    switchboardCollada.addToWorld(world);

    var clock = new VIZI.Clock();

    var update = function() {
      var delta = clock.getDelta();

      controls.onTick(delta);

      world.onTick(delta);
      world.render();

      window.requestAnimationFrame(update);
    };

    update();