extends layout

block content
  h1 #{building.name}

  div.wrapper
    section.details
      ul
        li ID: #{building._id}
        li Name: #{building.name}
        li Location: #{building.location}
        li Scale: #{building.scale}
        li Angle: #{building.angle}
        ul
          li Vertices: #{building.structure.vertices}
          li Faces: #{building.structure.faces}
        ul
          each model, key in building.models.raw
            li
              a(href="/#{model.path}") Download .#{model.type}
              - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
              |  (#{size} KB)
          li
            a(href="/api/building/#{building._id}.kml") Download .kml
        ul
          each model, key in building.models.zip
            li
              a(href="/#{model.path}") Download #{model.type} zip
              - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
              |  (#{size} KB)
        li
          | License: 
          a(rel='license', href='http://creativecommons.org/licenses/by-sa/4.0/')
            img(alt='Creative Commons License', style='border-width:0', src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png')
            br
            | This work is licensed under a 
            a(rel='license', href='http://creativecommons.org/licenses/by-sa/4.0/') Creative Commons Attribution-ShareAlike 4.0 International License
            | .
        li OSM: #{building.osm}
        li Stats: #{building.stats}
        li User ID: #{building.userId}
        li Created: #{building.createdAt}
        li Updated: #{building.updatedAt}
      p
        a(href="/building/#{building._id}/report") Report building

    section.view
      div#vizicities-viewport

  link(rel="stylesheet", href="https://rawgit.com/vizicities/vizicities/0.2.0/build/vizi.css")
  script(src="https://rawgit.com/vizicities/vizicities/0.2.0/build/vizi.js")
  script.
    var world = new VIZI.World({
      viewport: document.querySelector("#vizicities-viewport"),
      center: new VIZI.LatLon(#{building.location.coordinates[1]}, #{building.location.coordinates[0]})
    });

    var controls = new VIZI.ControlsMap(world.camera, {
      viewport: world.options.viewport
    });

    var mapConfig = {
      input: {
        type: "BlueprintInputMapTiles",
        options: {
          tilePath: "https://a.tiles.mapbox.com/v3/examples.map-i86l3621/{z}/{x}/{y}@2x.png"
        }
      },
      output: {
        type: "BlueprintOutputImageTiles",
        options: {
          grids: [
          {
            zoom: 19,
            tilesPerDirection: 3,
            cullZoom: 17
          }, {
            zoom: 18,
            tilesPerDirection: 3,
            cullZoom: 16
          }, {
            zoom: 17,
            tilesPerDirection: 3,
            cullZoom: 15
          }, {
            zoom: 16,
            tilesPerDirection: 4,
            cullZoom: 10
          }
          ]
        }
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: ["tiles"],
        actionObject: "input",
        actionName: "requestTiles",
        actionArguments: ["tiles"],
        actionOutput: {
          tiles: "tiles" // actionArg: triggerArg
        }
      }, {
        triggerObject: "output",
        triggerName: "gridUpdated",
        triggerArguments: ["tiles"],
        actionObject: "input",
        actionName: "requestTiles",
        actionArguments: ["tiles"],
        actionOutput: {
          tiles: "tiles" // actionArg: triggerArg
        }
      }, {
        triggerObject: "input",
        triggerName: "tileReceived",
        triggerArguments: ["image", "tile"],
        actionObject: "output",
        actionName: "outputImageTile",
        actionArguments: ["image", "tile"],
        actionOutput: {
          image: "image", // actionArg: triggerArg
          tile: "tile"
        }
      }]
    };

    var switchboardMap = new VIZI.BlueprintSwitchboard(mapConfig);
    switchboardMap.addToWorld(world);

    var colladaConfig = {
      input: {
        type: "BlueprintInputKML",
        options: {
          path: "/api/building/#{building._id}.kml"
        }
      },
      output: {
        type: "BlueprintOutputCollada",
        options: {}
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: [],
        actionObject: "input",
        actionName: "requestData",
        actionArguments: [],
        actionOutput: {}
      }, {
        triggerObject: "input",
        triggerName: "dataReceived",
        triggerArguments: ["kml"],
        actionObject: "output",
        actionName: "outputCollada",
        actionArguments: ["collada"],
        actionOutput: {
          collada: {
            process: "map",
            itemsObject: "kml",
            itemsProperties: "placemark.model",
            transformation: {
              coordinates: ["location.longitude", "location.latitude"],
              modelPath: "link.href"
            }
          }
        }
      }]
    };

    var switchboardCollada = new VIZI.BlueprintSwitchboard(colladaConfig);
    switchboardCollada.addToWorld(world);

    var clock = new VIZI.Clock();

    var update = function() {
      var delta = clock.getDelta();

      world.onTick(delta);
      world.render();

      window.requestAnimationFrame(update);
    };

    update();