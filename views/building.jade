extends layout

block content
  div#building-map

  section.container
    div.col-5.details
      h1 #{building.name}

      p #{building.locality.district}, #{building.locality.country}
        if building.locality.countryCode
          flag-icon(key="#{building.locality.countryCode}" img)

      if building.description
        hr
        p.description
          !=building.description.substr(0, 500).replace(/\n/g, "<br>") + ((building.description.length > 500) ? "&hellip;" : "")
          if building.creator
            br
            small Source: #[a(href="#{building.creator.url}") #{building.creator.name}]

      hr

      .dropdown
        .dropdown-container
            p.dropdown-description Downloads     
            p.dropdown-button Select a format    
            ul.dropdown-menu.dropdown-select
              each model, key in building.models.raw
                - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
                li
                  a(href="/api/building/#{building._id}/download/raw/#{model.type}") .#{model.type} (#{size} KB)
              each model, key in building.models.zip
                - var size = (model.fileSize) ? (model.fileSize / 1000).toFixed(2) : 0;
                li
                  a(href="/api/building/#{building._id}/download/zip/#{model.type}") .#{model.type} zip (#{size} KB)
              li
                a(href="/api/building/#{building._id}.kml") .kml
      
      p.license Licensed as  
        a(rel="license", href="http://creativecommons.org/licenses/by/4.0/") Creative Commons Attribution 4.0

      hr

      p.stats
        img(src="/images/icon-download.png")
        | #{building.stats.downloads} downloads
        img(src="/images/icon-polygon.png")
        | #{building.structure.faces} polygons

      hr
        
      ul
        if building.osm.id
          li
            a(href="http://www.openstreetmap.org/#{building.osm.type}/#{building.osm.id}") View on OpenStreetMap
        li Added by 
          a(href="/user/#{buildingUser.username}") #{buildingUser.username}
        li 
          a(href="/search/near/#{building.location.coordinates[0]},#{building.location.coordinates[1]},1000") See nearby buildings
      hr
      p
        a(href="/report/#{building._id}") Report building
        if (user && user._id.toString() === buildingUser.id.toString())
          a.right(href="/add/location/#{building._id}") Edit location

    div.col-7
      div#vizicities-viewport

  script(src="/lib/webcomponentsjs/webcomponents.min.js")
  link(rel="import" href="/lib/flag-icon/flag-icon.html")

  link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css")
  script(src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js")

  link(rel="stylesheet", href="/lib/vizicities/vizi.css")
  script(src="/lib/vizicities/vizi.min.js")

  script(src="/lib/vizicities/OBJLoader.js")
  script(src="/lib/vizicities/BlueprintOutputOBJ.js")

  script.
    // Dropdowns
    $(".dropdown-button").click(function() {
      $(".dropdown-menu").toggleClass("show-menu");
      $(".dropdown-menu > li").click(function(){
        $(".dropdown-menu").removeClass("show-menu");
      });
      $(".dropdown-menu.dropdown-select > li").click(function() {
        $(".dropdown-button").html($(this).html());
      });
    });

    var map = L.map("building-map", {zoomControl:false}).setView([#{building.location.coordinates[1]}, #{building.location.coordinates[0]}], 16);

    // Offset map
    map.panBy(L.point(-330, 200), {animate: false});

    // Disable drag and zoom handlers.
    map.dragging.disable();
    map.touchZoom.disable();
    map.doubleClickZoom.disable();
    map.scrollWheelZoom.disable();

    // Disable tap handler, if present.
    if (map.tap) map.tap.disable();

    //- L.tileLayer("http://{s}.tile.osm.org/{z}/{x}/{y}.png", {
    L.tileLayer("http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png", {
      //- attribution: "&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors"
      attribution: "&copy; <a href='http://stamen.com'>Stamen</a> & <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors"
    }).addTo(map);

    var world = new VIZI.World({
      viewport: document.querySelector("#vizicities-viewport"),
      center: new VIZI.LatLon(#{building.location.coordinates[1]}, #{building.location.coordinates[0]}),
      layersUI: false
    });

    var controls = new VIZI.ControlsMap(world.camera, {
      viewport: world.options.viewport
    });

    controls.controls.rotateUp(-16 * Math.PI / 180)
    controls.controls.dollyOut(1.15);
    controls.controls.autoRotate = true;

    controls.controls.noPan = true;
    controls.controls.noZoom = true;
    controls.controls.noRotate = true;

    var colladaConfig = {
      input: {
        type: "BlueprintInputKML",
        options: {
          path: "/api/building/#{building._id}.kml"
        }
      },
      output: {
        type: "BlueprintOutputOBJ",
        options: {}
      },
      triggers: [{
        triggerObject: "output",
        triggerName: "initialised",
        triggerArguments: [],
        actionObject: "input",
        actionName: "requestData",
        actionArguments: [],
        actionOutput: {}
      }, {
        triggerObject: "input",
        triggerName: "dataReceived",
        triggerArguments: ["kml"],
        actionObject: "output",
        actionName: "outputOBJ",
        actionArguments: ["obj"],
        actionOutput: {
          obj: {
            process: "map",
            itemsObject: "kml",
            itemsProperties: "placemark.model",
            transformation: {
              coordinates: ["location.longitude", "location.latitude"],
              modelPath: "link.hrefobj"
            }
          }
        }
      }]
    };

    var switchboardCollada = new VIZI.BlueprintSwitchboard(colladaConfig);
    switchboardCollada.addToWorld(world);

    var clock = new VIZI.Clock();

    var update = function() {
      var delta = clock.getDelta();

      controls.onTick(delta);

      world.onTick(delta);
      world.render();

      window.requestAnimationFrame(update);
    };

    update();

    var updateScale = function(scale) {
      // TODO: Find a more respectable way of accessing the collada object
      world.layers[0].object.children[0].scale.multiplyScalar(scale);
      world.layers[0].object.children[0].updateMatrix();
    }

    var updateAngle = function(angle) {
      // TODO: Find a more respectable way of accessing the collada object
      world.layers[0].object.children[0].rotation.y = -(angle * Math.PI / 180);
      world.layers[0].object.children[0].updateMatrix();
    }

    var checkForModel = function() {
      if (!world.layers[0].object.children[0]) {
        setTimeout(checkForModel, 250);
        return;
      }

      // Check scale
      if (#{(building.scale) ? true : false} === true) {
        updateScale(#{building.scale});
      }

      // Check angle
      if (#{(building.angle) ? true : false} === true) {
        updateAngle(#{building.angle});
      }

      var scale = world.layers[0].object.children[0].scale;
      
      var bbox = new THREE.Box3().setFromObject(world.layers[0].object.children[0]);
      var bboxMaxHorizontal = Math.max(Math.abs(bbox.min.z - bbox.max.z), Math.abs(bbox.min.x - bbox.max.x));
      var bboxMaxVertical = Math.abs(bbox.min.y - bbox.max.y);
      var bboxMax = Math.max(bboxMaxHorizontal, bboxMaxVertical) * scale.x;
      var ppm = world.pixelsPerMeter(world.center);
      var mpp = 1 / ppm.x;
      var tileDistance = Math.max(100, Math.ceil(bboxMaxHorizontal * 5));

      var mapConfig = {
        input: {
          type: "BlueprintInputStaticMapImage",
          options: {
            imagePath: "https://a.tiles.mapbox.com/v3/examples.map-i86l3621/{lon},{lat},{z}/{w}x{h}@2x.png"
          }
        },
        output: {
          type: "BlueprintOutputImage",
          options: {
            // TODO: Make this a certain number of metres beyond the bound of
            // the building being visualised.
            // TODO: Use the resulting bounds of this layer to change camera
            // distance
            distance: tileDistance * mpp, // Distance from center in metres
            shadowTexture: "/images/vizicities-shadow.png"
          }
        },
        triggers: [{
          triggerObject: "output",
          triggerName: "initialised",
          triggerArguments: ["bounds"],
          actionObject: "input",
          actionName: "requestImage",
          actionArguments: ["bounds"],
          actionOutput: {
            bounds: "bounds"
          }
        }, {
          triggerObject: "input",
          triggerName: "imageReceived",
          triggerArguments: ["image"],
          actionObject: "output",
          actionName: "outputImage",
          actionArguments: ["image"],
          actionOutput: {
            image: "image"
          }
        }]
      };

      var switchboardMap = new VIZI.BlueprintSwitchboard(mapConfig);
      switchboardMap.addToWorld(world);

      // Update camera
      var distance = controls.getZoom();
      // Using tileDistance in this way isn't perfect (as it's in metres) but it works
      var buildingHeight = Math.max(bboxMax + 100, (tileDistance * 1.3) * ppm.x);
  
      // Cap dimension so camera doesn't break
      buildingHeight = Math.min(buildingHeight, 1000);
      
      world.camera.camera.fov = 2 * Math.atan( buildingHeight * 1.4 / ( 2 * distance ) ) * ( 180 / Math.PI );
      world.camera.camera.updateProjectionMatrix();

      // Check for unloaded materials and replace with default colour
      // TODO: Find a better way to do this as currently it replaces all materials
      //- checkColladaMaterials(world.layers[0].object.children[0], 0xffffff);
    };
    
    checkForModel();